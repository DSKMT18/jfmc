import 'dotenv/config';
import { readFile, writeFile } from 'fs/promises';

const ADMIN_ID = 6630766118;

export function setupBuyRankHandlers(Bot, pendingReasons) {
   // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ ‚Äî –ø—Ä–∏—á–∏–Ω—ã –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–∞–∑–∞
   Bot.on('text', async (ctx, next) => {
      const replyTo = ctx.message?.reply_to_message;

      if (replyTo) {
         const reasonData = pendingReasons.get(replyTo.message_id);
         if (reasonData) {
            const { messageId, userId, type, originalCaption, promptMessageId } = reasonData;
            const reason = ctx.message.text;

            const decisionText = type === 'approve' ? `‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É —Ä–∞–Ω–≥–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ @${ctx.from.username}` : `‚ùå –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É —Ä–∞–Ω–≥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ @${ctx.from.username}`;
            const finalCaption = `${originalCaption}\n<blockquote>\n${decisionText}\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> ${reason}</blockquote>`;

            try {
               // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–æ–π
               await ctx.telegram.editMessageCaption(ctx.chat.id, messageId, undefined, finalCaption, {
                  reply_markup: null,
                  parse_mode: 'HTML',
               });
               // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
               await ctx.telegram.sendMessage(userId, `<blockquote>${decisionText}\n<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> ${reason}</blockquote>`,
                  { parse_mode: 'HTML' }
               );

               // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø—Ä–∏—á–∏–Ω—ã
               try {
                  await ctx.telegram.deleteMessage(ctx.chat.id, promptMessageId);
               } catch (e) {
                  console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ (promptMessageId):', e.message);
               }

               // –£–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –ø—Ä–∏—á–∏–Ω–æ–π
               try {
                  await ctx.deleteMessage();
               } catch (e) {
                  console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', e.message);
               }
            } catch (err) {
               console.error(err);
            } finally {
               pendingReasons.delete(replyTo.message_id);
            }
            return;
         }
      }
      return next();
   });

   // –ö–Ω–æ–ø–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è
   Bot.action(/^approve_(\d+)$/, async (ctx) => {
      if (ctx.from.id !== ADMIN_ID) return ctx.answerCbQuery('–ù–µ—Ç –ø—Ä–∞–≤!');

      const userId = ctx.match[1];
      const message = ctx.callbackQuery.message;

      const prompt = await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:');
      pendingReasons.set(prompt.message_id, {
         messageId: message.message_id,
         userId,
         type: 'approve',
         originalCaption: message.caption || '–ó–∞—è–≤–∫–∞',
         promptMessageId: prompt.message_id,
      });

      await ctx.answerCbQuery();
   });

   // –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫–∞–∑–∞
   Bot.action(/^reject_(\d+)$/, async (ctx) => {
      if (ctx.from.id !== ADMIN_ID) return ctx.answerCbQuery('–ù–µ—Ç –ø—Ä–∞–≤!');

      const userId = ctx.match[1];
      const message = ctx.callbackQuery.message;

      const prompt = await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –¥–ª—è –æ—Ç–∫–∞–∑–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:');
      pendingReasons.set(prompt.message_id, {
         messageId: message.message_id,
         userId,
         type: 'reject',
         originalCaption: message.caption || '–ó–∞—è–≤–∫–∞',
         promptMessageId: prompt.message_id,
      });

      await ctx.answerCbQuery();
   });

   // –ö–Ω–æ–ø–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
   Bot.action(/^block_(\d+)$/, async (ctx) => {
      if (ctx.from.id !== ADMIN_ID) return ctx.answerCbQuery('–ù–µ—Ç –ø—Ä–∞–≤!');

      const userId = parseInt(ctx.match[1]);
      const message = ctx.callbackQuery.message;

      try {
         // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
         const blacklistData = await readFile('./blacklist.json', 'utf8').catch(() => '[]');
         const blacklist = JSON.parse(blacklistData);

         // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
         if (!blacklist.includes(userId)) {
            blacklist.push(userId);
            await writeFile('./blacklist.json', JSON.stringify(blacklist, null, 2));
         }

         // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–æ–π
         const finalCaption = `${message.caption || '–ó–∞—è–≤–∫–∞'}\n<blockquote>\nüö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${ctx.from.username || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n</blockquote>`;
         await ctx.telegram.editMessageCaption(ctx.chat.id, message.message_id, undefined, finalCaption, {
            reply_markup: null,
            parse_mode: 'HTML',
         });

         // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
         await ctx.telegram.sendMessage(userId, '–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É —Ä–∞–Ω–≥–∞.', {
            parse_mode: 'HTML',
         });

         await ctx.answerCbQuery('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
      } catch (err) {
         console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ:', err);
         await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ');
      }
   });
}